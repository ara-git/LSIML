# -*- coding: utf-8 -*-
"""ホテリング理論、スミルノフ・グラブス検定を用いた外れ値検出の実装

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hOEpsPzrcMy-RUHSyDD2xcRMdNP_vb_
"""

import numpy as np
import pandas as pd
from scipy.stats import chi2
import matplotlib.pyplot as plt
import math
from scipy.stats import t
from pyod.models.knn import KNN


"""正規乱数を生成してみる。"""

# 正規乱数を生成
size = 10000
a = np.random.normal(loc=3, scale=5, size=size,)  # 平均  # 標準偏差  # 出力配列のサイズ(タプルも可)

"""ホテリング理論で外れ値を除去する。"""


class hotelling:
    # 引数:
    # array:データ（一次元)、alpha:上側確率
    def __init__(self, array, alpha=0.01):
        # 平均と分散を計算する
        sample_var = np.var(array, ddof=1)
        sample_mean = np.mean(array)
        # 閾値を計算する
        border = chi2.ppf(q=0.99, df=1)
        # データを標準化する
        converted_data = (a - sample_mean) ** 2 / sample_var
        # 外れ値を除外したデータを求める
        self.result = a[converted_data < border]
        # 外れ値の比率を求める
        self.rate_of_outlier = sum(converted_data >= border) / len(array)


instance = hotelling(a)
print(instance.result)

print(instance.rate_of_outlier)


"""スミルノフ・グラブス検定を行う。"""


class smi_test:
    def __init__(self, array, alpha=0.01):
        array = np.array(array)

        # 入力配列をメソッドとして保存
        self.input_array = array

        # データを除去していくため、入力配列のコピーを作る
        tmp_array = array.copy()
        # print(tmp_array)
        # 下で定義した関数を繰り返し呼び出し、再帰的に外れ値を除去する

        while tmp_array.any():
            # 外れ値を除去したデータが格納されているメソッド
            self.result = tmp_array.copy()
            tmp_array = self.run_test(tmp_array)

    def run_test(self, array):
        # 標本平均と分散を計算する
        sample_var = np.var(array, ddof=1)
        sample_mean = np.mean(array)

        # 統計量を計算する（最大値の）
        statistics_smi = abs(max(array) - sample_mean) / math.sqrt(sample_var)
        statistics_smi

        # 閾値を計算する。
        n = len(array)
        t_value = t.ppf(q=1 - 0.05 / n, df=n - 2)
        # print(t_value)

        border_smi = (n - 1) * (t_value ** 2 / (n * (n - 2) + n * t_value ** 2)) ** (
            0.5
        )
        # print(statistics_smi, border_smi)

        if statistics_smi >= border_smi:
            new_array = np.delete(array, array == max(array))
            return new_array
        else:
            return np.array([])

    # 外れ値の割合を出力する関数
    def rate_of_outlier(self):
        return len(self.result) / len(self.input_array)


ins = smi_test(a)

ins.rate_of_outlier()


class knn:
    def __init__(self, array, contamination_rate=0.1):
        array = np.array(array)
        new_array = array.reshape(-1, 1)
        # KNNクラスをインスタンス化
        clf = KNN(contamination=contamination_rate)
        clf.fit(new_array)
        # 外れ値を検出
        outliers = clf.predict(new_array)

        # 外れ値を除外したデータを保存
        knn.result = array[np.where(outliers == 0)]
